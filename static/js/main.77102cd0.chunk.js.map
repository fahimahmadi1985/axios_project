{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","term","setTerm","pictures","setPictures","pageNum","setPagenum","shouldRef","setShouldRef","pageChange","e","preventDefault","target","name","console","log","useEffect","axios","get","params","query","page","per_page","headers","Authorization","then","response","data","results","catch","error","message","className","onSubmit","type","onChange","value","length","map","pic","src","urls","thumb","alt","alt_description","key","id","style","width","height","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAgIeA,MA7Hf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGiBJ,mBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIqBN,oBAAS,GAJ9B,mBAINO,EAJM,KAIKC,EAJL,KAWPC,EAAa,SAAAC,GACjBA,EAAEC,iBACgB,QAAlBD,EAAEE,OAAOC,KACLP,EAAWD,EAAU,GACH,QAAlBK,EAAEE,OAAOC,MACTR,EAAU,GAC0CC,EAClDD,EAAU,GAEhBG,GAAa,GACbM,QAAQC,IAAI,YAAaV,IA+C3B,OA5CAW,qBAAU,WACRT,GACEU,IACGC,IAAI,yCAA0C,CAC7CC,OAAQ,CACNC,MAAOnB,EACPoB,KAAMhB,EACNiB,SAAU,IAEZC,QAAS,CACPC,cACE,gFAGLC,MAAK,SAAAC,GACJtB,EAAY,YAAIsB,EAASC,KAAKC,UAC9BpB,GAAa,MAEdqB,OAAM,SAAAC,GACLhB,QAAQC,IAAIe,EAAMC,eA0BxB,yBAAKC,UAAU,wBACb,yBAAKA,UAAU,uBACb,0BAAMC,SAxBQ,SAAAvB,GAClBA,EAAEC,iBACFM,IACGC,IAAI,yCAA0C,CAC7CC,OAAQ,CACNC,MAAOnB,EACPqB,SAAU,IAEZC,QAAS,CACPC,cACE,gFAGLC,MAAK,SAAAC,GACJtB,EAAY,YAAIsB,EAASC,KAAKC,aAE/BC,OAAM,SAAAC,GACLhB,QAAQC,IAAIe,EAAMC,aAOWC,UAAU,YACrC,yBAAKA,UAAU,OACZ,IACD,2BACEE,KAAK,OACLC,SAtEU,SAAAzB,GACpBR,EAAQQ,EAAEE,OAAOwB,OACjBtB,QAAQC,IAAId,IAqEF+B,UAAU,kBAGd,yBAAKA,UAAU,SACb,2BACEE,KAAK,SACLE,MAAM,SACNJ,UAAU,oCAKlB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,oBACZ7B,EAASkC,OACNlC,EAASmC,KAAI,SAAAC,GAAG,OACd,yBACEC,IAAKD,EAAIE,KAAKC,MACdC,IAAKJ,EAAIK,gBACTC,IAAKN,EAAIO,GACTC,MAAO,CAAEC,MAAO,QAASC,OAAQ,cAGrC,MAEN,yBAAKjB,UAAU,kCACb,4BACEE,KAAK,SACLgB,QAASzC,EACTI,KAAK,MACLmB,UAAU,sCAET,MAEH,4BACEE,KAAK,SACLgB,QAASzC,EACTI,KAAK,MACLmB,UAAU,sCAET,UC5GOmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.77102cd0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [term, setTerm] = useState(\"\");\n  const [pictures, setPictures] = useState([]);\n  const [pageNum, setPagenum] = useState(1);\n  const [shouldRef, setShouldRef] = useState(false);\n\n  const changeHandler = e => {\n    setTerm(e.target.value);\n    console.log(term);\n  };\n\n  const pageChange = e => {\n    e.preventDefault();\n    e.target.name === \"inc\"\n      ? setPagenum(pageNum + 1)\n      : e.target.name === \"dec\" &&\n        pageNum > 1 &&\n        /* hey omar the next line is a ternary condition */ setPagenum(\n          pageNum - 1\n        );\n    setShouldRef(true);\n    console.log(\"pageNum: \", pageNum);\n  };\n\n  useEffect(() => {\n    shouldRef &&\n      axios\n        .get(\"https://api.unsplash.com/search/photos\", {\n          params: {\n            query: term,\n            page: pageNum,\n            per_page: 21\n          },\n          headers: {\n            Authorization:\n              \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n          }\n        })\n        .then(response => {\n          setPictures([...response.data.results]);\n          setShouldRef(false);\n        })\n        .catch(error => {\n          console.log(error.message);\n        });\n  });\n\n  const sendRequest = e => {\n    e.preventDefault();\n    axios\n      .get(\"https://api.unsplash.com/search/photos\", {\n        params: {\n          query: term,\n          per_page: 21\n        },\n        headers: {\n          Authorization:\n            \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n        }\n      })\n      .then(response => {\n        setPictures([...response.data.results]);\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"bg-dark p-3 rounded\">\n        <form onSubmit={sendRequest} className=\"form-row\">\n          <div className=\"col\">\n            {\" \"}\n            <input\n              type=\"text\"\n              onChange={changeHandler}\n              className=\"form-control\"\n            />\n          </div>\n          <div className=\"col-3\">\n            <input\n              type=\"submit\"\n              value=\"Search\"\n              className=\"btn btn-success form-control\"\n            />\n          </div>\n        </form>\n      </div>\n      <div className=\"container-fluid\">\n        <div className=\"d-flex flex-wrap\">\n          {pictures.length\n            ? pictures.map(pic => (\n                <img\n                  src={pic.urls.thumb}\n                  alt={pic.alt_description}\n                  key={pic.id}\n                  style={{ width: \"100px\", height: \"120px\" }}\n                />\n              ))\n            : null}\n        </div>\n        <div className=\"d-flex justify-content-between\">\n          <button\n            type=\"button\"\n            onClick={pageChange}\n            name=\"dec\"\n            className=\"form-control col-3 btn btn-primary\"\n          >\n            {\"<<\"}\n          </button>\n          <button\n            type=\"button\"\n            onClick={pageChange}\n            name=\"inc\"\n            className=\"form-control col-3 btn btn-primary\"\n          >\n            {\">>\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}