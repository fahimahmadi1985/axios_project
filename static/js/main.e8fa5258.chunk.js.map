{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","term","setTerm","pictures","setPictures","pageNum","setPagenum","shouldRef","setShouldRef","emptyMsg","setEmptyMsg","pageChange","e","preventDefault","target","name","useEffect","axios","get","params","query","page","per_page","headers","Authorization","then","response","data","results","catch","error","console","log","message","className","onSubmit","length","type","onChange","value","style","height","placeholder","onClick","map","pic","src","urls","thumb","alt","alt_description","title","key","id","regular","width","url","modal","document","getElementById","span","getElementsByClassName","innerHTML","toUpperCase","color","addEventListener","display","window","event","firstChild","background","displayPic","role","fontSize","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8fa5258.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [term, setTerm] = useState(\"\");\n  const [pictures, setPictures] = useState([]);\n  const [pageNum, setPagenum] = useState(1);\n  const [shouldRef, setShouldRef] = useState(false);\n  const [emptyMsg, setEmptyMsg] = useState(false);\n\n  const changeHandler = e => {\n    setTerm(e.target.value);\n  };\n\n  const pageChange = e => {\n    e.preventDefault();\n    e.target.name === \"inc\"\n      ? setPagenum(pageNum + 1)\n      : e.target.name === \"dec\" && pageNum > 1\n      ? setPagenum(pageNum - 1)\n      : setPagenum(1);\n    setShouldRef(true);\n  };\n\n  useEffect(() => {\n    shouldRef &&\n      axios\n        .get(\"https://api.unsplash.com/search/photos\", {\n          params: {\n            query: term,\n            page: pageNum,\n            per_page: 20\n          },\n          headers: {\n            Authorization:\n              \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n          }\n        })\n        .then(response => {\n          setPictures([...response.data.results]);\n          setShouldRef(false);\n        })\n        .catch(error => {\n          console.log(error.message);\n        });\n  });\n\n  const sendRequest = e => {\n    e.preventDefault();\n    axios\n      .get(\"https://api.unsplash.com/search/photos\", {\n        params: {\n          query: term,\n          per_page: 20\n        },\n        headers: {\n          Authorization:\n            \"Client-ID 89a74f8c26da940b295f7c22ccaf83e3404ac033065c8db15fcbbc3b0639a400\"\n        }\n      })\n      .then(response => {\n        setPictures([...response.data.results]);\n        !pictures.length && setEmptyMsg(true);\n      })\n      .catch(error => {\n        console.log(error.message);\n      });\n  };\n\n  const displayPic = (url, title) => {\n    var modal = document.getElementById(\"myModal\");\n    //var thumbPic = document.getElementById(url);\n    var span = document.getElementsByClassName(\"close\")[0];\n    var picInfo = document.getElementsByClassName(\"picInfo\")[0];\n    picInfo.innerHTML = title.toUpperCase();\n    span.style.color = \"red\";\n    span.addEventListener(\"click\", () => {\n      modal.style.display = \"none\";\n    });\n    window.addEventListener(\"click\", event => {\n      if (event.target === modal) {\n        modal.style.display = \"none\";\n      }\n    });\n    modal.firstChild.style.background = `url(${url}) no-repeat center`;\n    modal.style.display = \"block\";\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"bg-secondary p-4 mb-5 rounded\">\n        <form onSubmit={sendRequest} className=\"form-row\">\n          <div className=\"col\">\n            {\" \"}\n            <input\n              type=\"text\"\n              onChange={changeHandler}\n              className=\"form-control\"\n              style={{ height: \"50px\" }}\n              placeholder=\"Picture title ...\"\n            />\n          </div>\n          <div className=\"col-3\">\n            <input\n              type=\"submit\"\n              value=\"Search\"\n              className=\"btn btn-success form-control\"\n              style={{ height: \"50px\" }}\n            />\n          </div>\n        </form>\n      </div>\n      <div className=\"row d-flex flex-row pl-5 pr-5\">\n        {pictures.length && (\n          <div className=\"d-flex justify-content-end col-sm-12 col-md-2 col-lg-2 \">\n            <button\n              type=\"button\"\n              onClick={pageChange}\n              name=\"dec\"\n              className=\"btn btn-light float-right\"\n            >\n              <span>&larr;</span>\n            </button>\n          </div>\n        )}\n\n        <div className=\"container col-sm-12 col-md-8 col-lg-8\">\n          <div className=\"d-flex flex-wrap border-1 justify-content-between pt-3\">\n            {pictures.length\n              ? pictures.map(pic => (\n                  <img\n                    src={pic.urls.thumb}\n                    alt={pic.alt_description}\n                    title={pic.alt_description}\n                    key={pic.id}\n                    id={pic.urls.regular}\n                    style={{ width: \"auto\" }}\n                    className=\"ml-1 mb-3 rounded border border-white border-1 width-inherit pic  col-xs-12 col-sm-6 col-md-3 col-lg-2\"\n                    onClick={e => displayPic(e.target.id, e.target.title)}\n                  />\n                ))\n              : null}\n          </div>\n        </div>\n\n        {pictures.length ? (\n          <div className=\"d-flex justify-content-between col-sm-12 col-md-2 col-lg-2\">\n            <button\n              type=\"button\"\n              onClick={pageChange}\n              name=\"inc\"\n              className=\"btn btn-light\"\n            >\n              <span>&rarr;</span>\n            </button>\n          </div>\n        ) : (\n          emptyMsg && (\n            <div\n              className=\"alert alert-danger col-8\"\n              role=\"alert row\"\n              style={{ fontSize: \"1.1rem\" }}\n            >\n              <span\n                className=\"fa fa-exclamation-triangle col-1\"\n                style={{ fontSize: \"4rem\" }}\n              ></span>\n              <span style={{ fontSize: \"1.5rem\" }} className=\"col-7\">\n                Error\n              </span>\n              There is no result for this keyword. Please try another word...\n            </div>\n          )\n        )}\n      </div>\n\n      <div id=\"myModal\" className=\"modal\">\n        <div className=\"modal-content position-relative\">\n          <span className=\"close text-white\">&times;</span>\n          <span className=\"picInfo text-warning d-flex justify-content-center\"></span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}